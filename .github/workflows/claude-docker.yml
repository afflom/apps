name: Claude Docker Automation

on:
  issues:
    types:
      - labeled
    
# Only maintainers should be able to assign the claude label to trigger this workflow
# The permissions are for the GITHUB_TOKEN used by Claude
permissions:
  contents: write  # Needed to create branches and push changes
  pull-requests: write  # Needed to create pull requests
  issues: write  # Needed to comment on issues
  packages: read  # Needed to pull docker images

# IMPORTANT: This workflow is disabled by default in favor of claude-automation.yml
# To use this workflow instead, you must add both labels: 'claude' and 'use-docker'

# Define global workflow parameters to avoid hardcoding values
env:
  NODE_VERSION: "18.x"
  MIN_ISSUE_LENGTH: 100
  MAX_RETRIES: 3
  BASE_RETRY_DELAY: 10  # seconds
  DOCKER_IMAGE_TAG: "claude-runner:latest"  # Specify exact Docker image tag

jobs:
  check-label:
    name: Check if this issue should use Docker implementation
    runs-on: ubuntu-latest
    # Only trigger if one of the required labels was just added
    # Full validation of both labels happens in the next step
    if: ${{ github.event.label.name == 'claude' || github.event.label.name == 'use-docker' }}
    
    steps:
      # This step will only continue if both 'claude' AND 'use-docker' labels are present
      - name: Check for required labels
        id: check-labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const labels = issue.data.labels.map(label => label.name);
            const hasClaudeLabel = labels.includes('claude');
            const hasDockerLabel = labels.includes('use-docker');
            
            if (!hasClaudeLabel || !hasDockerLabel) {
              console.log('This issue does not have both required labels (claude and use-docker)');
              console.log('Current labels:', labels.join(', '));
              return core.setFailed('Missing required labels');
            }
            
            console.log('Issue has both required labels. Proceeding with Docker implementation.');
            return issue.data.body;
      
      - name: Check if issue has enough information
        id: check-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Check if issue description is too short
            if (issue.data.body.length < process.env.MIN_ISSUE_LENGTH) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ This issue doesn't have enough details for Claude to implement. Please add more information and request the label to be added again.`
              });
              
              // Remove the claude label
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'claude'
              });
              
              return core.setFailed('Issue description is not detailed enough');
            }
            
            console.log('Issue has enough details for Claude to implement');
            return issue.data.body;

  implement-with-claude-docker:
    name: Implement with Claude (Docker)
    needs: check-label
    runs-on: ubuntu-latest
    # Skip this job if check-label failed (which means the correct labels weren't present)
    if: ${{ !contains(needs.check-label.result, 'failure') }}
    
    env:
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      ISSUE_TITLE: ${{ github.event.issue.title }}
      ISSUE_BODY: ${{ github.event.issue.body }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE_TAG }} .
      
      - name: Create branch for changes
        run: |
          # Create a sanitized branch name from the issue title
          BRANCH_NAME="claude/issue-${{ github.event.issue.number }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          git config --global user.name "Claude AI"
          git config --global user.email "claude-ai@anthropic.com"
          
          git checkout -b $BRANCH_NAME
      
      - name: Prepare issue description
        run: |
          # Create a file with the issue details
          cat > issue-details.md << EOL
          # Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          
          ${{ github.event.issue.body }}
          EOL
      
      - name: Run Claude in Docker container
        run: |
          # Export environment variables for use in script
          echo "MAX_RETRIES=${{ env.MAX_RETRIES }}" > .env-claude
          echo "BASE_RETRY_DELAY=${{ env.BASE_RETRY_DELAY }}" >> .env-claude
          
          cat > claude-prompt.txt << EOL
          You are tasked with implementing a solution for GitHub issue #${{ github.event.issue.number }}.
          
          Your job is to:
          1. Analyze the issue description below
          2. Implement the requested changes to the codebase
          3. Test your changes to ensure they work correctly
          4. Follow the project's code style and conventions
          5. Do not modify any pre-commit or pre-push hooks
          
          GitHub Issue Details:
          ---------------------
          Title: ${{ github.event.issue.title }}
          
          $(cat issue-details.md)
          ---------------------
          
          Please implement a solution and provide a detailed explanation of your changes for the PR description.
          EOL
          
          # Run Claude in Docker container with the prepared prompt and retry logic
          echo "Running Claude in Docker container to implement the solution..."
          
          # Script for running Claude with retries
          cat > run-claude.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Load environment variables
          source .env-claude
          
          # Implement retry logic for Claude API
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            # Capture both stdout and stderr, but also show in workflow logs
            echo "Running Claude with prompt:"
            cat claude-prompt.txt
            echo "-----------------------------------"
            
            if claude -p "$(cat claude-prompt.txt)" | tee claude-response.md 2> >(tee claude-error.log >&2); then
              SUCCESS=true
              echo "Claude completed implementation successfully"
              echo "-----------------------------------"
              echo "Claude response:"
              cat claude-response.md
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              ERROR_CODE=$?
              echo "Claude execution failed with exit code $ERROR_CODE (Attempt $RETRY_COUNT of $MAX_RETRIES)"
              echo "-----------------------------------"
              echo "Error output:"
              cat claude-error.log
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # Wait before retrying (exponential backoff)
                SLEEP_TIME=$((BASE_RETRY_DELAY * RETRY_COUNT))
                echo "Waiting $SLEEP_TIME seconds before retrying..."
                sleep $SLEEP_TIME
              else
                # Log the error
                echo "Claude failed after $MAX_RETRIES attempts"
                echo "Last error log:"
                cat claude-error.log
                exit 1
              fi
            fi
          done
          
          # Verify we have a meaningful response
          RESPONSE_SIZE=$(stat -c%s claude-response.md)
          if [ $RESPONSE_SIZE -lt 100 ]; then
            echo "WARNING: Claude response seems too short, might not contain implementation details"
            echo "Content of response file:"
            cat claude-response.md
          else
            echo "Claude response size: $RESPONSE_SIZE bytes, which seems adequate"
            echo "First 20 lines of response file:"
            head -n 20 claude-response.md
          fi
          EOF
          
          chmod +x run-claude.sh
          
          # Run Claude in Docker container
          if ! docker run --rm \
            -v $(pwd):/app \
            -w /app \
            -e ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            ${{ env.DOCKER_IMAGE_TAG }} \
            ./run-claude.sh; then
            
            # Handle failure by notifying on the issue
            gh issue comment ${{ github.event.issue.number }} --body "❌ Claude failed to implement this issue after multiple attempts. A maintainer will need to investigate."
            # Remove all trigger labels
            gh issue edit ${{ github.event.issue.number }} --remove-label claude
            gh issue edit ${{ github.event.issue.number }} --remove-label use-docker
            exit 1
          fi
      
      - name: Verify changes
        run: |
          # Run linting and tests to verify Claude's changes
          npm ci
          npm run typecheck
          npm run lint
          npm run test
          
          # If any of these fail, the workflow will stop
      
      - name: Commit and push changes
        run: |
          # Check if there are any changes
          if [[ -n $(git status --porcelain) ]]; then
            # Stage all changes
            git add .
            
            # Create commit message
            git commit -m "Fix issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
            
            Implemented by Claude AI
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            # Push to the new branch
            git push -u origin $BRANCH_NAME
            
            echo "Changes committed and pushed to branch $BRANCH_NAME"
          else
            echo "::warning::No changes were made by Claude"
            exit 1
          fi
      
      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            // Extract Claude's reasoning for PR description
            const fs = require('fs');
            let claudeResponse = '';
            
            try {
              claudeResponse = fs.readFileSync('claude-response.md', 'utf8');
            } catch (error) {
              console.log('Could not read Claude response, using default message');
              claudeResponse = 'Changes implemented by Claude.';
            }
            
            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Fix issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}`,
              body: `This PR addresses issue #${{ github.event.issue.number }}
              
              ## Implementation Details
              
              ${claudeResponse}
              
              ## Closes
              
              Closes #${{ github.event.issue.number }}
              
              ---
              🤖 This PR was created automatically by Claude AI in response to the issue being labeled with "claude".
              `,
              head: process.env.BRANCH_NAME,
              base: 'main'
            });
            
            console.log(`PR created: ${pr.data.html_url}`);
            return pr.data.number;
            
      - name: Add PR comment to issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: `I've created a pull request to address this issue: #${{ steps.create-pr.outputs.result }}
              
              Please review the implementation and provide feedback.
              
              🤖 - Claude`
            });